$accordion-item--padding-v: 24px; // accordion item, top and bottom padding
$accordion-item--padding-h: null; // accordion item, left and right padding
$accordion-icon--size: 16px; // accordion icon, width and height
$accordion-icon--thickness: 2px; // accordion icon, stroke width
$accordion-icon--radius: null; // accordion icon, lines radius cap
$spacing--hx-t: 24px;
$spacing--hx-b: 24px;

$font--family: (
  heading: null,
  base: '"Source Code Pro", monospace',
  code: '"Source Code Pro", monospace',
  pre: '"Source Code Pro", monospace',
);

// The typographic scale
$font--scale: (
  // key 		// font-size, line-height, kerning
  alpha: (48px, 58px, null),
  beta: (38px, 48px, null),
  gamma: (32px, 42px, null),
  delta: (24px, 32px, -0.1px),
  epsilon: (20px, 30px, -0.1px),
  zeta: (18px, 28px, -0.1px),
  eta: (16px, 24px, -0.1px),
  theta: (14px, 22px, null)
);

$font--size: (
  // ↓ Mobile 	// key in $font--scale
  h1: 'beta',
  h2: 'gamma',
  h3: 'delta',
  h4: 'delta',
  base: 'epsilon',
  sm: 'zeta',
  xs: 'eta',
  xxs: 'theta',
  bquote: 'epsilon',
  figcap: 'theta',
  code: 'eta',
  pre: 'eta',
  table: 'eta',
  // ↓ Desktop (set to null if font size won't change on desktop)
  h1-desktop: 'alpha',
  h2-desktop: 'beta',
  h3-desktop: 'gamma',
  h4-desktop: null,
  base-desktop: null,
  sm-desktop: null,
  xs-desktop: null,
  xxs-desktop: null,
  bquote-desktop: null,
  figcap-desktop: null,
  code-desktop: null,
  pre-desktop: null,
  table-desktop: null
);

// --------------------------------------------------------------------
// Retrieve Font Family -----------------------------------------------
// Used in _mixins.scss [@mixin font-family] --------------------------
// --------------------------------------------------------------------
@function get-font-family($elem) {
  @return map-get($font--family, $elem);
}

// --------------------------------------------------------------------
// Retrieve Font Size -------------------------------------------------
// Used in _mixins.scss [@mixin font-family] --------------------------
// --------------------------------------------------------------------
@function get-font-size($elem) {
  @if (map-get($font--size, $elem)) {
    @return nth(map-get($font--scale, map-get($font--size, $elem)), 1);
  } @else {
    @return null;
  }
}

@mixin divider-mix($layout: false) {
  display: block;
  height: 1px;
  @if ($layout == 'inverse') {
    background: color-border(divider-inverse);
  } @else {
    background: color-border(divider);
  }
}

@mixin divider($type: false, $layout: false) {
  @if ($type == 'before') {
    position: relative;

    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      @include divider-mix($layout);
    }
  } @else if ($type == 'after') {
    position: relative;

    &::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      @include divider-mix($layout);
    }
  } @else {
    @include divider-mix($layout);
  }
}

// Font Family
@mixin font-family($elem) {
  font-family: unquoted(get-font-family($elem));
}

// Font-size + Line-height + Kerning
@mixin font-size($elem) {
  font-size: get-font-size($elem);
  line-height: get-line-height($elem);
  letter-spacing: get-kerning($elem);
}

// Font Weight
@mixin font-weight($elem) {
  font-weight: get-font-weight($elem);
}

// Reset lists style
.list-reset {
  list-style: none;
  padding: 0;

  li {
    margin: 0;
  }
}

// accordion
.accordion {
  // core
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  .h1,
  .h2,
  .h3,
  .h4,
  .h5,
  .h6 {
    @include font-family(heading);
    @include font-weight(heading);
    clear: both;
    color: color(heading);
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  h6,
  .h6,
  small,
  .text-sm {
    @include font-size(sm);
  }

  h4,
  h5,
  h6,
  .h4,
  .h5,
  .h6 {
    margin-top: $spacing--hx-t;
    margin-bottom: $spacing--hx-b;
  }

  h6,
  .h6,
  small,
  .text-sm {
    @include font-size(sm);
  }

  .mb-0 {
    margin-bottom: 0;
  }

  li {
    @include divider(before);

    &:last-of-type {
      @include divider(after);
    }

    .invert-color & {
      @include divider(before, inverse);

      &:last-of-type {
        @include divider(after, inverse);
      }
    }
  }
}

.accordion-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: $accordion-item--padding-v;
  padding-bottom: $accordion-item--padding-v;
  padding-left: $accordion-item--padding-h;
  padding-right: $accordion-item--padding-h;
  cursor: pointer;

  span {
    width: calc(100% - (#{$accordion-icon--size} * 2));
  }
}

.accordion-content {
  padding-left: $accordion-item--padding-h;
  padding-right: $accordion-item--padding-h;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.15s ease-in-out, opacity 0.15s;

  .is-active & {
    opacity: 1;
  }

  p:last-child {
    margin-bottom: $accordion-item--padding-v;
  }
}

.accordion-icon {
  position: relative;
  width: $accordion-icon--size;
  height: $accordion-icon--size;

  &::before,
  &::after {
    content: '';
    position: absolute;
    background: color-icon(accordion);
    border-radius: $accordion-icon--radius;
    transition: transform 0.25s ease-out;

    .invert-color & {
      background: color-icon(accordion-inverse);
    }
  }

  &::before {
    top: 0;
    left: 50%;
    width: $accordion-icon--thickness;
    height: 100%;
    margin-left: -($accordion-icon--thickness / 2);
  }

  &::after {
    top: 50%;
    left: 0;
    width: 100%;
    height: $accordion-icon--thickness;
    margin-top: -($accordion-icon--thickness / 2);
  }

  .is-active & {
    cursor: pointer;

    &::before {
      transform: rotate(90deg);
    }

    &::after {
      transform: rotate(180deg);
    }
  }
}
